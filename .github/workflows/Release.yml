name: Release
run-name: ${{ github.actor }} start release. 🚀

on:
  pull_request:
    types:
      - closed
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: weplate
  IMAGE_TAG: latest

jobs:
  Merge-Master-Branch-In-Develop-Branch:
    runs-on: ubuntu-latest
    if: github.actor != 'github-actions[bot]'
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.WEPLATE_RELEASE_PAT_TOKEN }}

      - name: Set Git User
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Merge main into develop
        run: |
          git fetch origin develop
          git checkout develop
          git merge origin/main --no-ff --no-edit --allow-unrelated-histories
          git push origin develop

      - name: Checkout main
        run: |
          git checkout main

      - name: Get latest tag
        id: get_tag
        run: |
          tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null)
          if [ -z "$tag" ]; then
            echo "❌ No tag found. Exiting..."
            exit 1
          fi
          echo "✅ Found tag: $tag"
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Bump minor version
        id: bump_version
        run: |
          version="${{ steps.get_tag.outputs.tag }}"
          version="${version#v}"
          IFS='.' read -r major minor patch <<< "$version"
          new_tag="v$major.$((minor + 1)).$patch"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Push new tag
        run: |
          git tag ${{ steps.bump_version.outputs.new_tag }}
          git push origin ${{ steps.bump_version.outputs.new_tag }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag and push all Docker images to ECR
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REGION=${{ env.AWS_REGION }}

          declare -A services=(
            [client-weplate]=client-weplate
            [server-api]=server-api
            [server-auth]=server-auth
            [nginx]=nginx
          )

          for name in "${!services[@]}"; do
            DIR=apps/${services[$name]}
            IMAGE_URI=$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/weplate/$name:latest

            echo "🔨 Building $name from $DIR"
            docker build -t $IMAGE_URI $DIR
            docker push $IMAGE_URI
            echo "IMAGE_URI_${name//-/_}=$IMAGE_URI" >> $GITHUB_ENV
          done
