name: Release
run-name: ${{ github.actor }} start release. üöÄ

on:
  pull_request:
    types:
      - closed
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: weplate-bucket
  CODEDEPLOY_APP_NAME: weplate-codedeploy-app
  CODEDEPLOY_DEPLOYMENT_GROUP: weplate-deploy-group

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.WEPLATE_RELEASE_PAT_TOKEN }}

      - name: Set Git User
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Merge main into develop
        run: |
          git fetch origin develop
          git checkout develop
          git merge origin/main --no-ff --no-edit --allow-unrelated-histories
          git push origin develop

      - name: Get latest tag
        id: get_tag
        run: |
          tag=$(git tag --sort=-v:refname | head -n 1)
          if [ -z "$tag" ]; then
            echo "‚ùå No tag found. Exiting..."
            exit 1
          fi
          echo "‚úÖ Found tag: $tag"
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Bump minor version
        id: bump_version
        run: |
          VERSION="${{ steps.get_tag.outputs.tag }}"
          VERSION="${VERSION#v}"
          IFS='.' read -r major minor patch <<< "$VERSION"
          new_tag="v$major.$((minor + 1)).$patch"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Push new tag
        run: |
          git tag ${{ steps.bump_version.outputs.new_tag }}
          git push origin ${{ steps.bump_version.outputs.new_tag }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Compose
        run: |
          sudo curl -SL https://github.com/docker/compose/releases/download/v2.10.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Generate docker-compose.yml from template and Upload to S3
        run: |
          export ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          export ECR_REGISTRY=$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          export VERSION=${{ steps.bump_version.outputs.new_tag }}
          envsubst < docker-compose.template.yml > docker-compose.yml
          aws s3 cp docker-compose.yml s3://${{ env.S3_BUCKET_NAME }}/ecs-releases/docker-compose.yml

      - name: Build, tag and push all Docker images to ECR
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_REGISTRY=$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          VERSION="${{ steps.bump_version.outputs.new_tag }}"

          echo "${{ secrets.APP_ENV }}" > .env
          docker-compose build

          declare -A services=(
            [client-weplate]=client-weplate
            [server-api]=server-api
            [server-auth]=server-auth
            [nginx]=nginx
          )

          for NAME in "${!services[@]}"; do
            echo "üî® Pushing weplate/$NAME:$VERSION"
            docker push $ECR_REGISTRY/weplate/$NAME:$VERSION
            echo "üî® Push Complete weplate/$NAME:$VERSION in $ECR_REGISTRY"
          done

  determine-asg-and-deploy:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Determine ASG and Apply Desired Scaling
        run: |
          BLUE_NAME="blue"
          GREEN_NAME="green"

          # ALB Î¶¨Ïä§ÎÑàÎ°úÎ∂ÄÌÑ∞ TG ARN ÌôïÏù∏
          LISTENER_ARN_80=$(aws elbv2 describe-listeners \
            --load-balancer-arn ${{ secrets.WEPLATE_ALB_ARN }} \
            --query "Listeners[?Port==\`80\`].ListenerArn" --output text)

          LISTENER_ARN_8080=$(aws elbv2 describe-listeners \
            --load-balancer-arn ${{ secrets.WEPLATE_ALB_ARN }} \
            --query "Listeners[?Port==\`8080\`].ListenerArn" --output text)

          TG_ARN_80=$(aws elbv2 describe-listeners \
            --listener-arn "$LISTENER_ARN_80" \
            --query "Listeners[0].DefaultActions[0].TargetGroupArn" --output text)

          TG_ARN_8080=$(aws elbv2 describe-listeners \
            --listener-arn "$LISTENER_ARN_8080" \
            --query "Listeners[0].DefaultActions[0].TargetGroupArn" --output text)

          echo "üåê Port 80 TG ARN: $TG_ARN_80"
          echo "üõ†Ô∏è  Port 8080 TG ARN: $TG_ARN_8080"

          # Îì±Î°ùÎêú Target Group Ïù¥Î¶Ñ ÌôïÏù∏
          TG_NAME_80=$(aws elbv2 describe-target-groups \
            --target-group-arns "$TG_ARN_80" \
            --query "TargetGroups[0].TargetGroupName" --output text)

          TG_NAME_8080=$(aws elbv2 describe-target-groups \
            --target-group-arns "$TG_ARN_8080" \
            --query "TargetGroups[0].TargetGroupName" --output text)

          echo "üéØ Port 80 TargetGroup Name: $TG_NAME_80"
          echo "üéØ Port 8080 TargetGroup Name: $TG_NAME_8080"

          # Ïù¥Î¶Ñ ÎÅùÏùò ÏÉâÏÉÅ Ï∂îÏ∂ú
          DELETE_ASG_COLOR=$(echo "$TG_NAME_80" | awk -F'-' '{ print $NF }')
          ACTIVE_ASG_COLOR=$(echo "$TG_NAME_8080" | awk -F'-' '{ print $NF }')

          echo "üîÅ DELETE_ASG_COLOR from port 80: $DELETE_ASG_COLOR"
          echo "üöÄ ACTIVE_ASG_COLOR from port 8080: $ACTIVE_ASG_COLOR"

          ACTIVE_ASG="weplate-$ACTIVE_ASG_COLOR-asg"
          DELETE_ASG="weplate-$DELETE_ASG_COLOR-asg"

          # ÌòÑÏû¨ ACTIVE_ASG Ïù∏Ïä§ÌÑ¥Ïä§ ÌôïÏù∏ Î∞è Ï¢ÖÎ£å
          ACTIVE_COUNT=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names "$ACTIVE_ASG" \
            --query "AutoScalingGroups[0].Instances | length(@)" --output text)

          if [ "$ACTIVE_COUNT" -gt 0 ]; then
            echo "üõë $ACTIVE_ASG already has $ACTIVE_COUNT instance(s) running. Scaling to 0 before redeploy."

            aws autoscaling update-auto-scaling-group \
              --auto-scaling-group-name "$ACTIVE_ASG" \
              --min-size 0 --desired-capacity 0 --max-size 0

            echo "üí• Forcing termination of existing instances in $ACTIVE_ASG"

            INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
              --auto-scaling-group-names "$ACTIVE_ASG" \
              --query "AutoScalingGroups[0].Instances[*].InstanceId" \
              --output text)

            for INSTANCE_ID in $INSTANCE_IDS; do
              echo "üî• Terminating instance: $INSTANCE_ID"
              aws autoscaling terminate-instance-in-auto-scaling-group \
                --instance-id "$INSTANCE_ID" \
                --should-decrement-desired-capacity
            done

            echo "‚è≥ Waiting for $ACTIVE_ASG to fully scale down..."
            while true; do
              INSTANCE_COUNT=$(aws autoscaling describe-auto-scaling-groups \
                --auto-scaling-group-names "$ACTIVE_ASG" \
                --query "AutoScalingGroups[0].Instances | length(@)" --output text)

              echo "üîÑ $ACTIVE_ASG instance count: $INSTANCE_COUNT"

              if [ "$INSTANCE_COUNT" -eq 0 ]; then
                echo "‚úÖ All instances in $ACTIVE_ASG have been terminated."
                break
              fi

              sleep 10
            done
          else
            echo "‚úÖ $ACTIVE_ASG is already empty. Proceeding to launch."
          fi

          echo "üöÄ Launching new instance in $ACTIVE_ASG"
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name "$ACTIVE_ASG" \
            --min-size 1 --max-size 1 --desired-capacity 1

          echo "ACTIVE_ASG_COLOR=$ACTIVE_ASG_COLOR" >> $GITHUB_ENV
          echo "DELETE_ASG_COLOR=$DELETE_ASG_COLOR" >> $GITHUB_ENV
          echo "DELETE_ASG=$DELETE_ASG" >> $GITHUB_ENV
          
      - name: Wait for ALB Health Check ‚Üí Switch Listener ‚Üí Shutdown old ASG
        run: |
          DEPLOY_TG_NAME="weplate-tg-${ACTIVE_ASG_COLOR}"
          CURRENT_TG_NAME="weplate-tg-${DELETE_ASG_COLOR}"

          DEPLOY_TG_ARN=$(aws elbv2 describe-target-groups \
            --names "$DEPLOY_TG_NAME" \
            --query "TargetGroups[0].TargetGroupArn" --output text)

          CURRENT_TG_ARN=$(aws elbv2 describe-target-groups \
            --names "$CURRENT_TG_NAME" \
            --query "TargetGroups[0].TargetGroupArn" --output text)

          echo "ü©∫ Waiting for healthy targets in: $DEPLOY_TG_NAME"

          START_TIME=$(date +%s)
          while true; do
            STATUS=$(aws elbv2 describe-target-health \
              --target-group-arn "$DEPLOY_TG_ARN" \
              --query "TargetHealthDescriptions[].TargetHealth.State" \
              --output text)

            echo "Current target status: $STATUS"

            if [[ "$STATUS" == "healthy" ]]; then
              echo "‚úÖ All targets in $DEPLOY_TG_NAME are healthy"
              break
            fi

            NOW=$(date +%s)
            ELAPSED=$((NOW - START_TIME))
            if [[ "$ELAPSED" -gt 300 ]]; then
              echo "‚ùå Timeout after 5 minutes waiting for ALB health check"
              exit 1
            fi

            sleep 10
          done

          echo "üîÅ Switching ALB listeners"

          for PORT in 80 443; do
            LISTENER_ARN=$(aws elbv2 describe-listeners \
              --load-balancer-arn ${{ secrets.WEPLATE_ALB_ARN }} \
              --query "Listeners[?Port==\`${PORT}\`].ListenerArn" \
              --output text)

            echo "üîÑ Port $PORT ‚Üí $DEPLOY_TG_NAME"
            aws elbv2 modify-listener \
              --listener-arn "$LISTENER_ARN" \
              --default-actions Type=forward,TargetGroupArn="$DEPLOY_TG_ARN"
          done

          LISTENER_ARN_8080=$(aws elbv2 describe-listeners \
            --load-balancer-arn ${{ secrets.WEPLATE_ALB_ARN }} \
            --query "Listeners[?Port==\`8080\`].ListenerArn" \
            --output text)

          echo "üîÑ Port 8080 ‚Üí $CURRENT_TG_NAME"
          aws elbv2 modify-listener \
            --listener-arn "$LISTENER_ARN_8080" \
            --default-actions Type=forward,TargetGroupArn="$CURRENT_TG_ARN"

          echo "‚úÖ ALB listener forwarding complete"

          echo "‚ÑπÔ∏è Delete Start '$DELETE_ASG_COLOR'"
          if [ "$DELETE_ASG_COLOR" != "" ]; then
            echo "üì¶ Shutting down previous ASG: $DELETE_ASG"
            aws autoscaling update-auto-scaling-group \
              --auto-scaling-group-name "$DELETE_ASG" \
              --min-size 0 --desired-capacity 0 --max-size 0

            INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
              --auto-scaling-group-names "$DELETE_ASG" \
              --query "AutoScalingGroups[0].Instances[*].InstanceId" \
              --output text)

            if [ -z "$INSTANCE_IDS" ]; then
              echo "‚úÖ $DELETE_ASG has no running instances."
            else
              for INSTANCE_ID in $INSTANCE_IDS; do
                echo "üî• Terminating instance in $DELETE_ASG: $INSTANCE_ID"
                aws autoscaling terminate-instance-in-auto-scaling-group \
                  --instance-id "$INSTANCE_ID" \
                  --should-decrement-desired-capacity
              done

              echo "‚è≥ Waiting for $DELETE_ASG to fully scale down..."
              while true; do
                INSTANCE_COUNT=$(aws autoscaling describe-auto-scaling-groups \
                  --auto-scaling-group-names "$DELETE_ASG" \
                  --query "AutoScalingGroups[0].Instances | length(@)" --output text)

                echo "üîÑ $DELETE_ASG instance count: $INSTANCE_COUNT"

                if [ "$INSTANCE_COUNT" -eq 0 ]; then
                  echo "‚úÖ All instances in $DELETE_ASG have been terminated."
                  break
                fi

                sleep 10
              done
            fi
          else
            echo "‚ÑπÔ∏è No previous ASG to shut down"
          fi
