name: Release
run-name: ${{ github.actor }} start release. 🚀

on:
  pull_request:
    types:
      - closed
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: weplate-bucket
  CODEDEPLOY_APP_NAME: weplate-codedeploy-app
  CODEDEPLOY_DEPLOYMENT_GROUP: weplate-deploy-group

jobs:
  Merge-Master-Branch-In-Develop-Branch:
    runs-on: ubuntu-latest
    if: github.actor != 'github-actions[bot]'
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.WEPLATE_RELEASE_PAT_TOKEN }}

      - name: Set Git User
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Merge main into develop
        run: |
          git fetch origin develop
          git checkout develop
          git merge origin/main --no-ff --no-edit --allow-unrelated-histories
          git push origin develop

      - name: Checkout main
        run: |
          git checkout main

      - name: Get latest tag
        id: get_tag
        run: |
          tag=$(git tag --sort=-v:refname | head -n 1)
          if [ -z "$tag" ]; then
            echo "❌ No tag found. Exiting..."
            exit 1
          fi
          echo "✅ Found tag: $tag"
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Bump minor version
        id: bump_version
        run: |
          VERSION="${{ steps.get_tag.outputs.tag }}"
          VERSION="${VERSION#v}"
          IFS='.' read -r major minor patch <<< "$VERSION"
          new_tag="v$major.$((minor + 1)).$patch"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Push new tag
        run: |
          git tag ${{ steps.bump_version.outputs.new_tag }}
          git push origin ${{ steps.bump_version.outputs.new_tag }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Compose
        run: |
          sudo curl -SL https://github.com/docker/compose/releases/download/v2.10.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Generate docker-compose.yml from template
        run: |
          export VERSION=${{ steps.bump_version.outputs.new_tag }}
          envsubst < docker-compose.template.yml > docker-compose.yml

      - name: Build, tag and push all Docker images to ECR
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_REGISTRY=$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          VERSION="${{ steps.bump_version.outputs.new_tag }}"

          echo "${{ secrets.APP_ENV }}" > .env
          docker-compose build

          declare -A services=(
            [client-weplate]=client-weplate
            [server-api]=server-api
            [server-auth]=server-auth
            [nginx]=nginx
          )

          for NAME in "${!services[@]}"; do
            echo "🔨 Pushing weplate/$NAME:$VERSION"
            docker tag weplate/$NAME:$VERSION $ECR_REGISTRY/weplate/$NAME:$VERSION
            echo "🔨 weplate/$NAME:$VERSION tagging clear"
            docker push $ECR_REGISTRY/weplate/$NAME:$VERSION
            echo "🔨 Push Complete weplate/$NAME:$VERSION in $ECR_REGISTRY"
          done

      - name: Generate ECS task definition
        run: |
          export ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          export ECR_REGISTRY=$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          export VERSION="${{ steps.bump_version.outputs.new_tag }}"
          envsubst < taskdef.template.json > taskdef.json

      - name: Register ECS Task Definition
        run: |
          TASK_REVISION=$(aws ecs register-task-definition \
            --cli-input-json file://taskdef.json \
            --query 'taskDefinition.revision' \
            --output text)
          echo "✅ Task registered with revision: $TASK_REVISION"
          echo "TASK_REVISION=$TASK_REVISION" >> $GITHUB_ENV

      - name: Generate AppSpec file
        run: |
          envsubst < appspec.template.json > appspec.json

      - name: Zip deploy bundle
        run: |
          zip deploy.zip taskdef.json appspec.json

      - name: Upload to S3
        run: |
          DEPLOY_BUNDLE_PATH="ecs-releases/weplate-task-${{ steps.bump_version.outputs.new_tag }}.zip"
          aws s3 cp deploy.zip s3://${{ env.S3_BUCKET_NAME }}/$DEPLOY_BUNDLE_PATH
          echo "DEPLOY_BUNDLE_PATH=$DEPLOY_BUNDLE_PATH" >> $GITHUB_ENV

      - name: Create CodeDeploy Deployment
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODEDEPLOY_APP_NAME }} \
            --deployment-group-name ${{ env.CODEDEPLOY_DEPLOYMENT_GROUP }} \
            --s3-location bucket=${{ env.S3_BUCKET_NAME }},key=$DEPLOY_BUNDLE_PATH,bundleType=zip \
